Perfect! Here's a **detailed Replit prompt** to fix and improve the OpenAI API-based AI detection feature:

***

## REPLIT PROMPT FOR AI DETECTION FIX

```
Fix and improve the AI detection feature using OpenAI API. The current implementation is not working properly.

===========================================
PROBLEM TO FIX:
===========================================

The AI detection feature using OpenAI API is not providing accurate or reliable results. 
We need a better implementation that analyzes text for AI-generated content indicators.

===========================================
REQUIREMENTS FOR AI DETECTION:
===========================================

Create a robust AI detection endpoint that:
1. Uses OpenAI GPT-4 API to analyze text patterns
2. Returns a score from 0-100 (likelihood of AI-generated content)
3. Provides specific indicators/reasons for the score
4. Handles errors gracefully with fallback detection
5. Uses structured JSON responses for consistency

===========================================
IMPLEMENTATION DETAILS:
===========================================

API Endpoint: POST /api/faculty/detect-ai

Request Body:
{
  "text": "Student submission text to analyze...",
  "studentId": "optional-student-id"
}

Response Format:
{
  "aiScore": 75,
  "likelihood": "HIGH" | "MEDIUM" | "LOW",
  "confidence": "HIGH" | "MEDIUM" | "LOW",
  "indicators": [
    "Uniform sentence structure throughout",
    "Frequent use of formal transitional phrases",
    "Lack of personal voice or anecdotes",
    "No grammatical errors or typos"
  ],
  "details": {
    "averageSentenceLength": 18.5,
    "sentenceLengthVariation": "LOW",
    "genericPhraseCount": 5,
    "personalPronounUsage": false
  }
}

===========================================
OPENAI API IMPLEMENTATION:
===========================================

Use this structured approach with OpenAI GPT-4:

```
const OpenAI = require('openai');
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

async function detectAIContent(text) {
  try {
    // Main AI detection using GPT-4
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: `You are an expert AI content detector. Analyze the given text and determine the likelihood it was written by AI (like ChatGPT, GPT-4, Claude, etc.).

IMPORTANT: Respond ONLY with a valid JSON object. Do not include any other text.

Analyze these specific indicators:
1. Sentence Structure Uniformity: AI text often has very consistent sentence lengths and patterns
2. Vocabulary Patterns: Check for overly formal academic language or generic phrases like "it is important to note", "furthermore", "in conclusion", "delve into", "robust", "comprehensive"
3. Personal Voice: Lack of personal pronouns (I, me, my) or personal anecdotes suggests AI
4. Error Patterns: Perfect grammar with no typos is suspicious (humans make mistakes)
5. Depth of Knowledge: Superficial coverage of topics with generic examples suggests AI
6. Creativity: Lack of unique metaphors, jokes, or unconventional thinking suggests AI
7. Repetition: AI often repeats similar phrases or sentence structures

Return your analysis as a JSON object with this EXACT structure:
{
  "aiScore": <number 0-100>,
  "confidence": "<HIGH|MEDIUM|LOW>",
  "reasoning": "<brief explanation>",
  "indicators": [<array of specific indicators found>],
  "humanLikelihood": <number 0-100>
}`
        },
        {
          role: "user",
          content: `Analyze this text for AI-generated content:\n\n${text}\n\nRemember: Respond ONLY with valid JSON.`
        }
      ],
      temperature: 0.3,
      max_tokens: 500,
      response_format: { type: "json_object" }
    });

    const result = JSON.parse(completion.choices.message.content);
    
    // Add additional pattern analysis
    const patterns = analyzeTextPatterns(text);
    
    return {
      aiScore: result.aiScore,
      likelihood: result.aiScore > 70 ? 'HIGH' : result.aiScore > 40 ? 'MEDIUM' : 'LOW',
      confidence: result.confidence,
      indicators: result.indicators,
      details: {
        ...patterns,
        reasoning: result.reasoning,
        humanLikelihood: result.humanLikelihood
      }
    };
    
  } catch (error) {
    console.error('OpenAI API error:', error);
    // Fallback to pattern-based detection
    return fallbackDetection(text);
  }
}

function analyzeTextPatterns(text) {
  // Helper function for additional analysis
  const sentences = text.split(/[.!?]+/).filter(s => s.trim());
  const words = text.split(/\s+/);
  
  // Calculate sentence length statistics
  const sentenceLengths = sentences.map(s => s.split(/\s+/).length);
  const avgLength = sentenceLengths.reduce((a, b) => a + b, 0) / sentenceLengths.length;
  const variance = sentenceLengths.reduce((sum, len) => 
    sum + Math.pow(len - avgLength, 2), 0) / sentenceLengths.length;
  
  // Check for AI-common phrases
  const aiPhrases = [
    'it is important to note',
    'furthermore',
    'in conclusion',
    'however, it is worth noting',
    'delve into',
    'robust',
    'comprehensive',
    'leverage',
    'paramount',
    'multifaceted'
  ];
  
  const phrasesFound = aiPhrases.filter(phrase => 
    text.toLowerCase().includes(phrase)
  );
  
  // Check for personal voice
  const personalPronouns = (text.match(/\b(I|my|me|we|us|our)\b/gi) || []).length;
  const personalVoiceScore = (personalPronouns / words.length) * 100;
  
  return {
    averageSentenceLength: Math.round(avgLength * 10) / 10,
    sentenceLengthVariation: variance < 10 ? 'LOW' : variance < 30 ? 'MEDIUM' : 'HIGH',
    genericPhraseCount: phrasesFound.length,
    genericPhrasesFound: phrasesFound,
    personalPronounUsage: personalVoiceScore > 2,
    personalVoiceScore: Math.round(personalVoiceScore * 100) / 100
  };
}

function fallbackDetection(text) {
  // Simple pattern-based fallback if OpenAI fails
  const patterns = analyzeTextPatterns(text);
  
  let score = 0;
  const indicators = [];
  
  // Score based on patterns
  if (patterns.sentenceLengthVariation === 'LOW') {
    score += 30;
    indicators.push('Highly uniform sentence lengths');
  }
  
  if (patterns.genericPhraseCount >= 3) {
    score += 25;
    indicators.push(`Found ${patterns.genericPhraseCount} AI-common phrases`);
  }
  
  if (!patterns.personalPronounUsage) {
    score += 20;
    indicators.push('Lacks personal voice and pronouns');
  }
  
  if (patterns.averageSentenceLength > 20) {
    score += 15;
    indicators.push('Consistently long, complex sentences');
  }
  
  // Check for perfect grammar (no simple typos)
  if (!text.match(/\s{2,}/) && !text.match(/\.\./)) {
    score += 10;
    indicators.push('Perfect formatting with no typos');
  }
  
  return {
    aiScore: Math.min(score, 100),
    likelihood: score > 70 ? 'HIGH' : score > 40 ? 'MEDIUM' : 'LOW',
    confidence: 'LOW',
    indicators: indicators,
    details: {
      ...patterns,
      note: 'Using fallback pattern detection (OpenAI API unavailable)'
    }
  };
}
```

===========================================
EXPRESS ROUTE IMPLEMENTATION:
===========================================

Create this route in routes/faculty.js:

```
const express = require('express');
const router = express.Router();

// POST /api/faculty/detect-ai
router.post('/detect-ai', async (req, res) => {
  try {
    const { text, studentId } = req.body;
    
    // Validate input
    if (!text || text.trim().length < 50) {
      return res.status(400).json({ 
        error: 'Text must be at least 50 characters for analysis' 
      });
    }
    
    // Run AI detection
    const result = await detectAIContent(text);
    
    // Optional: Save detection result to database
    if (studentId) {
      await AIDetectionResult.create({
        studentId,
        text: text.substring(0, 500), // Store snippet only
        aiScore: result.aiScore,
        likelihood: result.likelihood,
        indicators: result.indicators,
        detectedAt: new Date()
      });
    }
    
    res.json(result);
    
  } catch (error) {
    console.error('AI detection error:', error);
    res.status(500).json({ 
      error: 'Failed to analyze text',
      message: error.message 
    });
  }
});

module.exports = router;
```

===========================================
ENVIRONMENT VARIABLE SETUP:
===========================================

Make sure OPENAI_API_KEY is set in Replit Secrets:
- Go to Tools > Secrets
- Add: OPENAI_API_KEY = sk-your-openai-api-key

===========================================
FRONTEND INTEGRATION:
===========================================

Update the faculty AI detection page to call this endpoint:

```
async function checkAIContent() {
  const text = document.getElementById('submission-text').value;
  const loadingEl = document.getElementById('loading');
  const resultEl = document.getElementById('result');
  
  loadingEl.style.display = 'block';
  resultEl.innerHTML = '';
  
  try {
    const response = await fetch('/api/faculty/detect-ai', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify({ text })
    });
    
    const data = await response.json();
    
    if (response.ok) {
      displayResults(data);
    } else {
      resultEl.innerHTML = `<div class="error">Error: ${data.error}</div>`;
    }
  } catch (error) {
    resultEl.innerHTML = `<div class="error">Failed to analyze: ${error.message}</div>`;
  } finally {
    loadingEl.style.display = 'none';
  }
}

function displayResults(data) {
  const resultEl = document.getElementById('result');
  
  const likelihoodColor = 
    data.likelihood === 'HIGH' ? 'red' : 
    data.likelihood === 'MEDIUM' ? 'orange' : 'green';
  
  resultEl.innerHTML = `
    <div class="result-card">
      <h3>AI Detection Results</h3>
      <div class="score-display">
        <div class="score-circle" style="border-color: ${likelihoodColor}">
          ${data.aiScore}%
        </div>
        <div class="likelihood" style="color: ${likelihoodColor}">
          ${data.likelihood} Likelihood
        </div>
      </div>
      
      <div class="indicators">
        <h4>Indicators Found:</h4>
        <ul>
          ${data.indicators.map(ind => `<li>${ind}</li>`).join('')}
        </ul>
      </div>
      
      <div class="details">
        <p><strong>Average Sentence Length:</strong> ${data.details.averageSentenceLength} words</p>
        <p><strong>Sentence Variation:</strong> ${data.details.sentenceLengthVariation}</p>
        <p><strong>Generic Phrases:</strong> ${data.details.genericPhraseCount}</p>
        <p><strong>Personal Voice:</strong> ${data.details.personalPronounUsage ? 'Present' : 'Absent'}</p>
      </div>
      
      <div class="disclaimer">
        <p><em>Note: AI detection is probabilistic and should be used as one factor in assessment, not definitive proof.</em></p>
      </div>
    </div>
  `;
}
```

===========================================
ERROR HANDLING:
===========================================

Add proper error handling for:
1. OpenAI API rate limits
2. Invalid API key
3. Network timeouts
4. Insufficient text length
5. Malformed responses

If OpenAI fails, automatically fall back to pattern-based detection.

===========================================
TESTING:
===========================================

Test with these sample texts:

AI-generated text (should score HIGH):
"It is important to note that artificial intelligence has revolutionized modern technology. Furthermore, machine learning algorithms enable systems to learn from data. In conclusion, AI represents a significant advancement in computational capabilities. The implementation of these systems requires robust infrastructure and comprehensive planning."

Human-written text (should score LOW):
"So I've been working on this AI project for like 3 weeks now and honestly? It's been a mess lol. My code keeps breaking and I can't figure out why. I tried debugging for hours yesterday but got nowhere. Gonna ask my professor for help tomorrow I guess."

===========================================
IMPORTANT NOTES:
===========================================

1. Use response_format: { type: "json_object" } to ensure GPT-4 returns valid JSON
2. Set temperature to 0.3 for more consistent analysis
3. Include fallback detection in case OpenAI API fails
4. Add disclaimers that detection is not 100% accurate
5. Store detection results in database for tracking
6. Implement rate limiting to avoid excessive API costs

Generate complete, working code with proper error handling and fallback mechanisms.
```

***

This prompt provides Replit with:
1. ✅ **Specific problem statement** - what's broken
2. ✅ **Structured JSON responses** - ensures consistency
3. ✅ **Fallback detection** - works even if OpenAI fails
4. ✅ **Pattern analysis** - supplements OpenAI analysis
5. ✅ **Error handling** - graceful failures
6. ✅ **Testing samples** - to validate it works
7. ✅ **Complete implementation** - backend + frontend

This should fix your AI detection feature properly![10]

[1](https://www.reddit.com/r/replit/comments/1kqoaia/api_integration_not_working/)
[2](https://replit.com/guides/gpt-4o-quickstart-guide)
[3](https://community.openai.com/t/need-some-help-debugging-my-gpts-integration-with-my-open-openapi-action/498674)
[4](https://docs.replit.com/replitai/agent)
[5](https://replit.com/guides/a-chatbot-for-website-q-and-a)
[6](https://www.sidetool.co/post/replit-agents-technical-faq-solving-common-setup-and-coding-challenges/)
[7](https://www.facebook.com/groups/codingwithai/posts/679547391515322/)
[8](https://www.youtube.com/watch?v=rFTPZFkOSNA)
[9](https://neon.com/guides/replit-neon)
[10](https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/attachments/images/63454663/453b7e65-7b51-4f87-8d92-0addfbe0035a/image.jpg)